#, savePredictions=F
, search = "random"
#, classProbs = T
#, summaryFunction = twoClassSummary
)
logit_fit <- train(stroke ~., data = train, method = "LogitBoost", trControl=trctrl
#tuneGrid=gbmGrid
)
logit_fit
plot(logit_fit)
pred <- predict(logit_fit, newdata = test, type = "prob")
levels(test$stroke) <- as.factor(c(0,1))
lr_preds_test <- c(0,0,0,0,0,0,0,0,0,0,0)
i<-1
for (thresh in seq(0.25,0.75,0.05)){
lr_pred <- ifelse(pred[2] > thresh,1,0)
cm <- table(
as.factor(lr_pred),
as.factor(test$stroke)
)[2:1, 2:1]
lr_preds_test[i] <- F_meas(cm) # f1 score
i<-i+1
}
names(lr_preds_test) <- seq(0.25,0.75,0.05)
lr_preds_test
pred <- as.factor(ifelse(pred[2] > 0.5 ,1,0))
tb <- table(Predicted = pred, Actual = test$stroke)[2:1, 2:1]
tb
(tb[1:1,1:1] + tb[2:2, 2:2])/(tb[1:1,2:2] + tb[2:2, 1:1] + tb[1:1,1:1] + tb[2:2, 2:2]) #Accuracy
F_meas(tb) # F1
recall(tb)  # Recall
precision(tb) # Precision
summary(Logit)
# Now we have a balanced dataset
table(train_smoted$stroke)
# Regression ----------------------------------------
Logit <- glm(stroke~., data=train, family = binomial(link = "logit"))
summary(Logit)
lr_prob1 <- predict(Logit, newdata = test, type="response")
lr_preds_test <- c(0,0,0,0,0,0,0,0,0,0,0)
i<-1
for (thresh in seq(0.25,0.75,0.05)){
lr_pred <- ifelse(lr_prob1 > thresh,1,0)
cm <- table(
as.factor(lr_pred),
as.factor(test$stroke)
)[2:1, 2:1]
lr_preds_test[i] <- F_meas(cm) # f1 score
i<-i+1
}
names(lr_preds_test) <- seq(0.25,0.75,0.05)
lr_preds_test
# Regression ----------------------------------------
Logit <- glm(stroke~., data=train_smoted, family = binomial)
summary(Logit)
# Regression ----------------------------------------
Logit <- glm(stroke~., data=train_smoted
# Regression ----------------------------------------
Logit <- glm(stroke~., data=train, family = binomial)
# Regression ----------------------------------------
Logit <- glm(stroke~., data=train, family = binomial)
summary(Logit)
lr_prob1 <- predict(Logit, newdata = test, type="response")
lr_prob1 <- predict(Logit, newdata = test, type="probs")
lr_prob1 <- predict(Logit, newdata = test, type="link")
lr_prob1 <- predict(Logit, newdata = test, type="link")
lr_prob1 <- predict(Logit, newdata = test, type="terms")
View(lr_prob1)
lr_prob1 <- predict(Logit, newdata = test, type="response")
lr_prob1
View(test)
caret::predict.train(Logit,newdata = test, type = "raw")
caret::predict.train(Logit, newdata = as.data.frame(test), type = "raw")
# Regression ----------------------------------------
Logit <- glm(stroke~., data=as.data.frame(train), family = binomial)
summary(Logit)
caret::predict.train(Logit, newdata = as.data.frame(test), type = "raw")
as.data.frame(train)
train <- as.data.frame(train)
# Regression ----------------------------------------
Logit <- glm(stroke~., data=as.data.frame(train), family = binomial)
summary(Logit)
caret::predict.train(Logit, newdata = as.data.frame(test), type = "raw")
lr_prob1 <- predict(Logit, newdata = test, type="response")
caret::predict.train(Logit, newdata = test, type = "raw")
# Regression ----------------------------------------
Logit <- glm(stroke ~., data=as.data.frame(train), family = binomial(link = 'logit'))
summary(Logit)
caret::predict.train(Logit, newdata = test, type = "raw")
caret::predict.train(Logit, newdata = test)
as.data.frame(train)
lr_prob1 <- predict(Logit, newdata = test, type="response")
lr_prob1 <- predict(Logit, newdata = test)
lr_prob1
plot(lr_prob1)
summary(Logit)
filterCtrl <- sbfControl(functions = rfSBF, method = "repeatedcv", repeats = 5)
set.seed(10)
train_smoted[-stroke]
train_smoted[-c(stroke9]
train_smoted[-c(stroke9)]
train_smoted[-c(stroke)]
train_smoted[,-c(stroke)]
train_smoted[,-stroke]
train_smoted[-stroke,]
train_smoted[- c(stroke),]
train_smoted
train_smoted[-11]
rfWithFilter <- sbf(train_smoted[-11],train_smoted[11], sbfControl = filterCtrl)
rfWithFilter <- sbf(x = train_smoted[-11],y = train_smoted[11], sbfControl = filterCtrl)
rfWithFilter <- sbf(x = train_smoted[-11],y = "stroke", sbfControl = filterCtrl)
rfWithFilter <- sbf(x = train_smoted, y = "stroke", sbfControl = filterCtrl)
rfWithFilter <- sbf(x = train_smoted,train_smoted$stroke , sbfControl = filterCtrl)
rf <- readRDS("rf_model.rds")
print(rf)
plot(rf)
print(rf)
model_rf <- predict(rf, newdata = test)
tb <- table(Predicted = model_rf, Actual = test$stroke)[2:1, 2:1]
tb
(tb[1:1,1:1] + tb[2:2, 2:2])/(tb[1:1,2:2] + tb[2:2, 1:1] + tb[1:1,1:1] + tb[2:2, 2:2]) #Accuracy
F_meas(tb) # F1
recall(tb)  # Recall
precision(tb) # Precision
# Random Forest -----------------------------
for (i in 1:11) {
levels(train_smoted[,i]) <- make.names(c(levels(train_smoted[,i])))
}
for (i in 1:11) {
levels(test[,i]) <- make.names(c(levels(test[,i])))
}
#
control <- trainControl(method='boot632',
number=2,
#repeats=3,
#search = "grid",
#classProbs = T,
#summaryFunction = twoClassSummary,
allowParallel=T
)
# Metric compare model is Accuracy
metric <- "Accuracy"
#Number randomely variable selected is mtry
mtry <- sqrt(ncol(train))
tunegrid <- expand.grid(.mtry=rnorm(3,mean=mtry,sd=1)
)
rf <- readRDS("rf_model.rds")
print(rf)
model_rf <- predict(rf, newdata = test)
tb <- table(Predicted = model_rf, Actual = test$stroke)[2:1, 2:1]
tb
(tb[1:1,1:1] + tb[2:2, 2:2])/(tb[1:1,2:2] + tb[2:2, 1:1] + tb[1:1,1:1] + tb[2:2, 2:2]) #Accuracy
F_meas(tb) # F1
recall(tb)  # Recall
precision(tb) # Precision
logit_fit <- train(stroke ~., data = train, method = "LogitBoost", trControl=trctrl
#tuneGrid=gbmGrid
)
logit_fit <- train(stroke ~., data = train_smoted, method = "LogitBoost", trControl=trctrl
#tuneGrid=gbmGrid
)
#gbmGrid <- expand.grid(nIter=c(16,50,102))
trctrl <- trainControl(method = "repeatedcv"
, number = 3
, repeats = 10
#, savePredictions=F
, search = "random"
#, classProbs = T
#, summaryFunction = twoClassSummary
)
logit_fit <- train(stroke ~., data = train_smoted, method = "LogitBoost", trControl=trctrl
#tuneGrid=gbmGrid
)
logit_fit
plot(logit_fit)
#gbmGrid <- expand.grid(nIter=c(16,50,102))
trctrl <- trainControl(method = "repeatedcv"
, number = 5
, repeats = 10
#, savePredictions=F
, search = "random"
#, classProbs = T
#, summaryFunction = twoClassSummary
)
logit_fit <- train(stroke ~., data = train_smoted, method = "LogitBoost", trControl=trctrl
#tuneGrid=gbmGrid
)
logit_fit
plot(logit_fit)
pred <- predict(logit_fit, newdata = test, type = "prob")
levels(test$stroke) <- as.factor(c(0,1))
lr_preds_test <- c(0,0,0,0,0,0,0,0,0,0,0)
i<-1
for (thresh in seq(0.25,0.75,0.05)){
lr_pred <- ifelse(pred[2] > thresh,1,0)
cm <- table(
as.factor(lr_pred),
as.factor(test$stroke)
)[2:1, 2:1]
lr_preds_test[i] <- F_meas(cm) # f1 score
i<-i+1
}
names(lr_preds_test) <- seq(0.25,0.75,0.05)
lr_preds_test
gbmGrid <- expand.grid(nIter=c(28,102,150))
trctrl <- trainControl(method = "repeatedcv"
, number = 5
, repeats = 10
#, savePredictions=F
, search = "random"
, classProbs = T
, summaryFunction = twoClassSummary
)
logit_fit <- train(stroke ~., data = train_smoted, method = "LogitBoost", trControl=trctrl,
tuneGrid=gbmGrid,
metric= "ROC"
)
logit_fit
plot(logit_fit)
pred <- predict(logit_fit, newdata = test, type = "prob")
levels(test$stroke) <- as.factor(c(0,1))
lr_preds_test <- c(0,0,0,0,0,0,0,0,0,0,0)
i<-1
for (thresh in seq(0.25,0.75,0.05)){
lr_pred <- ifelse(pred[2] > thresh,1,0)
cm <- table(
as.factor(lr_pred),
as.factor(test$stroke)
)[2:1, 2:1]
lr_preds_test[i] <- F_meas(cm) # f1 score
i<-i+1
}
names(lr_preds_test) <- seq(0.25,0.75,0.05)
lr_preds_test
pred <- as.factor(ifelse(pred[2] > 0.5 ,1,0))
tb <- table(Predicted = pred, Actual = test$stroke)[2:1, 2:1]
tb
# LogitBoost --------------------
for (i in 1:11) {
levels(train_smoted[,i]) <- make.names(c(levels(train_smoted[,i])))
}
for (i in 1:11) {
levels(test[,i]) <- make.names(c(levels(test[,i])))
}
gbmGrid <- expand.grid(nIter=c(102,150,200))
gbmGrid <- expand.grid(nIter=c(102,150,200))
trctrl <- trainControl(method = "cv"
, number = 4
# , repeats = 10
# , search = "random"
, classProbs = T
, summaryFunction = twoClassSummary
)
logit_fit <- train(stroke ~., data = train_smoted, method = "LogitBoost", trControl=trctrl,
tuneGrid=gbmGrid,
metric= "ROC"
)
logit_fit
plot(logit_fit)
gbmGrid <- expand.grid(nIter=c(102,150,200,250,300))
trctrl <- trainControl(method = "cv"
, number = 4
# , repeats = 10
# , search = "random"
, classProbs = T
, summaryFunction = twoClassSummary
)
logit_fit <- train(stroke ~., data = train_smoted, method = "LogitBoost", trControl=trctrl,
tuneGrid=gbmGrid,
metric= "ROC"
)
logit_fit
plot(logit_fit)
pred <- predict(logit_fit, newdata = test, type = "prob")
levels(test$stroke) <- as.factor(c(0,1))
lr_preds_test <- c(0,0,0,0,0,0,0,0,0,0,0)
i<-1
for (thresh in seq(0.25,0.75,0.05)){
lr_pred <- ifelse(pred[2] > thresh,1,0)
cm <- table(
as.factor(lr_pred),
as.factor(test$stroke)
)[2:1, 2:1]
lr_preds_test[i] <- F_meas(cm) # f1 score
i<-i+1
}
names(lr_preds_test) <- seq(0.25,0.75,0.05)
lr_preds_test
pred <- as.factor(ifelse(pred[2] > 0.5 ,1,0))
tb <- table(Predicted = pred, Actual = test$stroke)[2:1, 2:1]
tb
gbmGrid <- expand.grid(nIter=c(102,300,500))
gbmGrid <- expand.grid(nIter=c(102,300,500))
trctrl <- trainControl(method = "cv"
, number = 3
, repeats = 5
# , search = "random"
, classProbs = T
, summaryFunction = twoClassSummary
)
gbmGrid <- expand.grid(nIter=c(102,300,500))
trctrl <- trainControl(method = "boot"
, number = 3
# , repeats = 5
# , search = "random"
, classProbs = T
, summaryFunction = twoClassSummary
)
logit_fit <- train(stroke ~., data = train_smoted, method = "LogitBoost", trControl=trctrl,
tuneGrid=gbmGrid,
metric= "ROC"
)
logit_fit
plot(logit_fit)
gbmGrid <- expand.grid(nIter=c(102,300,500))
trctrl <- trainControl(method = "boot"
, number = 3
# , repeats = 5
# , search = "random"
, classProbs = T
, summaryFunction = twoClassSummary
)
logit_fit <- train(stroke ~., data = train_smoted, method = "LogitBoost", trControl=trctrl,
tuneGrid=gbmGrid,
metric= "ROC"
)
logit_fit
plot(logit_fit)
gbmGrid <- expand.grid(nIter=c(102,300,500))
trctrl <- trainControl(method = "cv"
, number = 3
# , repeats = 5
# , search = "random"
, classProbs = T
, summaryFunction = twoClassSummary
)
logit_fit <- train(stroke ~., data = train_smoted, method = "LogitBoost", trControl=trctrl,
tuneGrid=gbmGrid,
metric= "ROC"
)
logit_fit
plot(logit_fit)
pred <- predict(logit_fit, newdata = test, type = "raw")
pred <- predict(logit_fit, newdata = test, type = "prob")
View(pred)
pred <- round(predict(logit_fit, newdata = test, type = "prob"),2)
View(pred)
gbmGrid <- expand.grid(nIter=c(102,300,500,1000))
trctrl <- trainControl(method = "cv"
, number = 3
# , repeats = 5
# , search = "random"
, classProbs = T
, summaryFunction = twoClassSummary
)
logit_fit <- train(stroke ~., data = train_smoted, method = "LogitBoost", trControl=trctrl,
tuneGrid=gbmGrid,
metric= "ROC"
)
logit_fit
plot(logit_fit)
pred <- round(predict(logit_fit, newdata = test, type = "prob"),2)
levels(test$stroke) <- as.factor(c(0,1))
lr_preds_test <- c(0,0,0,0,0,0,0,0,0,0,0)
i<-1
for (thresh in seq(0.24,0.74,0.05)){
lr_pred <- ifelse(pred[2] > thresh,1,0)
cm <- table(
as.factor(lr_pred),
as.factor(test$stroke)
)[2:1, 2:1]
lr_preds_test[i] <- F_meas(cm) # f1 score
i<-i+1
}
names(lr_preds_test) <- seq(0.25,0.75,0.05)
lr_preds_test
gbmGrid <- expand.grid(nIter=c(500,1000,2000))
trctrl <- trainControl(method = "cv"
, number = 3
# , repeats = 5
# , search = "random"
, classProbs = T
, summaryFunction = twoClassSummary
)
logit_fit <- train(stroke ~., data = train_smoted, method = "LogitBoost", trControl=trctrl,
tuneGrid=gbmGrid,
metric= "ROC"
)
logit_fit
plot(logit_fit)
pred <- round(predict(logit_fit, newdata = test, type = "prob"),2)
levels(test$stroke) <- as.factor(c(0,1))
lr_preds_test <- c(0,0,0,0,0,0,0,0,0,0,0)
i<-1
for (thresh in seq(0.24,0.74,0.05)){
lr_pred <- ifelse(pred[2] > thresh,1,0)
cm <- table(
as.factor(lr_pred),
as.factor(test$stroke)
)[2:1, 2:1]
lr_preds_test[i] <- F_meas(cm) # f1 score
i<-i+1
}
names(lr_preds_test) <- seq(0.24,0.74,0.05)
lr_preds_test
gbmGrid <- expand.grid(nIter=c(16,34,67,102))
trctrl <- trainControl(method = "cv"
, number = 3
# , repeats = 5
# , search = "random"
, classProbs = T
, summaryFunction = twoClassSummary
)
logit_fit <- train(stroke ~., data = train_smoted, method = "LogitBoost", trControl=trctrl,
tuneGrid=gbmGrid,
metric= "ROC"
)
logit_fit
plot(logit_fit)
pred <- round(predict(logit_fit, newdata = test, type = "prob"),2)
levels(test$stroke) <- as.factor(c(0,1))
lr_preds_test <- c(0,0,0,0,0,0,0,0,0,0,0)
i<-1
for (thresh in seq(0.24,0.74,0.05)){
lr_pred <- ifelse(pred[2] > thresh,1,0)
cm <- table(
as.factor(lr_pred),
as.factor(test$stroke)
)[2:1, 2:1]
lr_preds_test[i] <- F_meas(cm) # f1 score
i<-i+1
}
names(lr_preds_test) <- seq(0.24,0.74,0.05)
lr_preds_test
pred <- as.factor(ifelse(pred[2] > 0.49 ,1,0))
tb <- table(Predicted = pred, Actual = test$stroke)[2:1, 2:1]
tb
(tb[1:1,1:1] + tb[2:2, 2:2])/(tb[1:1,2:2] + tb[2:2, 1:1] + tb[1:1,1:1] + tb[2:2, 2:2]) #Accuracy
F_meas(tb) # F1
recall(tb)  # Recall
precision(tb) # Precision
pred <- as.factor(ifelse(pred[2] > 0.5 ,1,0))
tb <- table(Predicted = pred, Actual = test$stroke)[2:1, 2:1]
pred <- as.factor(ifelse(pred[2] > 0.5 ,1,0))
pred <- as.factor(ifelse(pred[2] > 049 ,1,0))
pred <- as.factor(ifelse(pred[2] > 0.49 ,1,0))
names(lr_preds_test) <- seq(0.24,0.74,0.05)
lr_preds_test
pred <- as.factor(ifelse(pred[2] > 0.49 ,1,0))
tb <- table(Predicted = pred, Actual = test$stroke)[2:1, 2:1]
tb
gbmGrid <- expand.grid(nIter=c(16,34,102))
trctrl <- trainControl(method = "repeatedcv"
, number = 3
, repeats = 5
# , search = "random"
, classProbs = T
, summaryFunction = twoClassSummary
)
logit_fit <- train(stroke ~., data = train_smoted, method = "LogitBoost", trControl=trctrl,
tuneGrid=gbmGrid,
metric= "ROC"
)
logit_fit
plot(logit_fit)
pred <- round(predict(logit_fit, newdata = test, type = "prob"),2)
levels(test$stroke) <- as.factor(c(0,1))
lr_preds_test <- c(0,0,0,0,0,0,0,0,0,0,0)
i<-1
for (thresh in seq(0.24,0.74,0.05)){
lr_pred <- ifelse(pred[2] > thresh,1,0)
cm <- table(
as.factor(lr_pred),
as.factor(test$stroke)
)[2:1, 2:1]
lr_preds_test[i] <- F_meas(cm) # f1 score
i<-i+1
}
names(lr_preds_test) <- seq(0.24,0.74,0.05)
lr_preds_test
lr_preds_test <- c(0,0,0,0,0,0,0,0,0,0,0)
i<-1
for (thresh in seq(0.24,0.74,0.05)){
lr_pred <- ifelse(pred[2] > thresh,1,0)
cm <- table(
as.factor(lr_pred),
as.factor(test$stroke)
)[2:1, 2:1]
lr_preds_test[i] <- round(F_meas(cm),2) # f1 score
i<-i+1
}
names(lr_preds_test) <- seq(0.24,0.74,0.05)
lr_preds_test
pred <- as.factor(ifelse(pred[2] > 0.5 ,1,0))
tb <- table(Predicted = pred, Actual = test$stroke)[2:1, 2:1]
tb
(tb[1:1,1:1] + tb[2:2, 2:2])/(tb[1:1,2:2] + tb[2:2, 1:1] + tb[1:1,1:1] + tb[2:2, 2:2]) #Accuracy
F_meas(tb) # F1
recall(tb)  # Recall
levels(test$stroke) <- as.factor(c(0,1))
lr_preds_test <- c(0,0,0,0,0,0,0,0,0,0,0)
i<-1
for (thresh in seq(0.24,0.74,0.05)){
lr_pred <- ifelse(pred[2] > thresh,1,0)
cm <- table(
as.factor(lr_pred),
as.factor(test$stroke)
)[2:1, 2:1]
lr_preds_test[i] <- round(F_meas(cm),4) # f1 score
i<-i+1
}
names(lr_preds_test) <- seq(0.24,0.74,0.05)
